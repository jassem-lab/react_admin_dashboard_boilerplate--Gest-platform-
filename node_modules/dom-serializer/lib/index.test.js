"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var cheerio_1 = __importDefault(require("cheerio"));
// eslint-disable-next-line @typescript-eslint/ban-ts-ignore
// @ts-ignore
var parse_1 = __importDefault(require("cheerio/lib/parse"));
var index_1 = __importDefault(require("./index"));
var defaultOpts = cheerio_1.default.prototype.options;
function html(preset, str, options) {
    if (options === void 0) { options = {}; }
    var opts = __assign(__assign(__assign({}, defaultOpts), preset), options);
    var dom = parse_1.default(str, opts);
    return index_1.default(dom, opts);
}
function xml(str, options) {
    if (options === void 0) { options = {}; }
    var opts = __assign(__assign(__assign({}, defaultOpts), options), { xmlMode: true });
    var dom = parse_1.default(str, opts);
    return index_1.default(dom, opts);
}
describe("render DOM parsed with htmlparser2", function () {
    // only test applicable to the default setup
    describe("(html)", function () {
        var htmlFunc = html.bind(null, { _useHtmlParser2: true });
        // it doesn't really make sense for {decodeEntities: false}
        // since currently it will convert <hr class='blah'> into <hr class="blah"> anyway.
        it("should handle double quotes within single quoted attributes properly", function () {
            var str = "<hr class='an \"edge\" case' />";
            expect(htmlFunc(str)).toStrictEqual('<hr class="an &quot;edge&quot; case">');
        });
    });
    // run html with default options
    describe("(html, {})", testBody.bind(null, html.bind(null, { _useHtmlParser2: true })));
    // run html with turned off decodeEntities
    describe("(html, {decodeEntities: false})", testBody.bind(null, html.bind(null, { _useHtmlParser2: true, decodeEntities: false })));
    describe("(xml)", function () {
        it("should render CDATA correctly", function () {
            var str = "<a> <b> <![CDATA[ asdf&asdf ]]> <c/> <![CDATA[ asdf&asdf ]]> </b> </a>";
            expect(xml(str)).toStrictEqual(str);
        });
        it('should append ="" to attributes with no value', function () {
            var str = "<div dropdown-toggle>";
            expect(xml(str)).toStrictEqual('<div dropdown-toggle=""/>');
        });
        it('should append ="" to boolean attributes with no value', function () {
            var str = "<input disabled>";
            expect(xml(str)).toStrictEqual('<input disabled=""/>');
        });
        it("should preserve XML prefixes on attributes", function () {
