var JSON5 = require("json5");
var path = require("path");
var util = require("util");
var os = require("os");
var assign = require("object-assign");
var emojiRegex = /[\uD800-\uDFFF]./;
var emojiList = require("emojis-list").filter(function(emoji) {
	return emojiRegex.test(emoji)
});
var matchAbsolutePath = /^\/|^[A-Z]:[/\\]|^\\\\/i; // node 0.10 does not support path.isAbsolute()
var matchAbsoluteWin32Path = /^[A-Z]:[/\\]|^\\\\/i;
var matchRelativePath = /^\.\.?[/\\]/;

var baseEncodeTables = {
	26: "abcdefghijklmnopqrstuvwxyz",
	32: "123456789abcdefghjkmnpqrstuvwxyz", // no 0lio
	36: "0123456789abcdefghijklmnopqrstuvwxyz",
	49: "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ", // no lIO
	52: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
	58: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ", // no 0lIO
	62: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
	64: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_"
};
var emojiCache = {};
var parseQueryDeprecationWarning = util.deprecate(function() {},
	"loaderUtils.parseQuery() received a non-string value which can be problematic, " +
	"see https://github.com/webpack/loader-utils/issues/56" + os.EOL +
	"parseQuery() will be replaced with getOptions() in the next major version of loader-utils."
);

function encodeStringToEmoji(content, length) {
	if (emojiCache[content]) return emojiCache[content];
	length = length || 1;
	var emojis = [];
	do {
		var index = Math.floor(Math.random() * emojiList.length);
		emojis.push(emojiList[index]);
		emojiList.splice(index, 1);
	} while (--length > 0);
	var emojiEncoding = emojis.join('');
	emojiCache[content] = emojiEncoding;
	return emojiEncoding;
}

function encodeBufferToBase(buffer, base) {
	var encodeTable = baseEncodeTables[base];
	if (!encodeTable) throw new Error("Unknown encoding base" + base);

	var readLength = buffer.length;

	var Big = require('big.js');
	Big.RM = Big.DP = 0;
	var b = new Big(0);
	for (var i = readLength - 1; i >= 0; i--) {
		b = b.times(256).plus(buffer[i]);
	}

	var output = "";
	while (b.gt(0)) {
		output = encodeTable[b.mod(base)] + output;
		b = b.div(base);
	}

	Big.DP = 20;
	Big.RM = 1;

	return output;
}

exports.parseQuery = function parseQuery(query) {
	var specialValues = {
		'null': null,
		'true': true,
		'false': false
	};
	if(!query) return {};
	if(typeof query !== "string") {
		parseQueryDeprecationWarning();
		return query;
	}
	if(query.substr(0, 1) !== "?")
		throw new Error("a valid query string passed to parseQuery should begin with '?'");
	query = query.substr(1);
	var queryLength = query.length;
	if(query.substr(0, 1) === "{" && query.substr(-1) === "}") {
		return JSON5.parse(query);
	}
	var queryArgs = query.split(/[,\&]/g);
	var result = {};
	queryArgs.forEach(function(arg) {
		var idx = arg.indexOf("=");
		if(idx >= 0) {
			var name = arg.substr(0, idx);
			var value = decodeURIComponent(arg.substr(idx+1));
			if (specialValues.hasOwnProperty(value)) {
				value = specialValues[value];
			}
			if(name.substr(-2) === "[]") {
				name = decodeURIComponent(name.substr(0, name.length-2));
				if(!Array.isArray(result[name]))
					result[name] = [];
				result[name].push(value);
			} else {
				name = decodeURIComponent(name);
				result[name] = value;
			}
		} else {
			if(arg.substr(0, 1) === "-") {
				result[decodeURIComponent(arg.substr(1))] = false;
			} else if(arg.substr(0, 1) === "+") {
				result[decodeURIComponent(arg.substr(1))] = true;
			} else {
				result[decodeURIComponent(arg)] = true;
			}
		}
	});
	return result;
};

exports.getLoaderConfig = function(loaderContext, defaultConfigKey) {
	var query = exports.parseQuery(loaderContext.query);
	var configKey = query.config || defaultConfigKey;
	if (configKey) {
		var config = loaderContext.options[configKey] || {};
		delete query.config;
		return assign({}, config, query);
	}

	return query;
};

exports.stringifyRequest = function(loaderContext, request) {
	var splitted = request.split("!");
	var context = loaderContext.context || (loaderContext.options && loaderCo